#!/usr/bin/env groovy

pipeline {

  agent {
      label 'golang-next'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Test') {
      environment {
        CODECOV_TOKEN = credentials('codecov-token')
      }
      steps {
        container('golang'){
          sh 'CGO_ENABLED=0 go test -coverprofile=coverage.txt -covermode=atomic ./sdk/...'
          sh 'curl -s https://codecov.io/bash | bash -s - -t ${CODECOV_TOKEN}'
        }
      }
    }

    stage('Lint') {
      steps {
        container('golang'){
          sh 'golint -set_exit_status ./sdk/... ./examples/...'
        }
      }
    }

    stage('Build') {
      steps {
        container('golang'){
            // Build the SDK project
            sh 'go build -v ./sdk'

            // Build the SDK example plugins
            sh 'for d in examples/*/; do cd $d; if [ "$d" != "examples/c_plugin/" ]; then go build -v -o plugin; fi ; cd ../.. ; done'

            // Check that the example plugins dry-run successfully
            sh 'for d in examples/*/; do if [ "$d" != "examples/c_plugin/" ]; then cd $d; if [ ! -f "plugin" ]; then echo "plugin binary not found"; fi; if ! ./plugin --dry-run; then exit 1; fi; cd ../.. ; fi ; done'
        }
      }
    }

    stage('Tagged Release') {
      when {
        buildingTag()
      }
      environment {
        GITHUB_TOKEN = credentials('vio-bot-gh-token')
      }
      steps {
        container('golang') {
          withDockerRegistry(registry: [credentialsId: 'vio-docker-hub']) {
            sh 'goreleaser release --rm-dist'
          }
        }
      }
    }
  }
}
