#!/usr/bin/env groovy

pipeline {

  agent any

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    // Run linting on project source code.
    stage('Lint') {
      agent {
        docker {
          image 'vaporio/golang:1.13'
          reuseNode true
        }
      }
      steps {
        sh 'make lint'
      }
    }

    // Run unit tests and upload the coverage report to codecov.
    stage('Test') {
      agent {
        docker {
          image 'vaporio/golang:1.13'
          reuseNode true
        }
      }
      environment {
        CODECOV_TOKEN = credentials('codecov-token')
      }
      steps {
        sh 'make test'
        sh 'mv coverage.out coverage.txt && curl -s https://codecov.io/bash | bash -s - -t ${CODECOV_TOKEN}'
      }
    }

    // Verify that the binary builds successfully.
    stage('Build') {
      agent {
        docker {
          image 'vaporio/golang:1.13'
          reuseNode true
        }
      }
      steps {
        sh 'make build'
        sh 'make examples'
        sh 'make check-examples'
      }
    }

    // Generate a new release draft on GitHub for a tag matching a version string
    // pattern. The release will include an auto-generated changelog and build
    // artifacts.
    stage('Draft GitHub Release') {
      when {
        // example matches: 1.2.3, 1.2.3-dev
        tag pattern: '(0|[1-9]*)\\.(0|[1-9]*)\\.(0|[1-9]*)(-(\\S*))?$', comparator: "REGEXP"
      }
      environment {
        GITHUB_USER = 'vapor-ware'
        GITHUB_TOKEN = credentials('1de2c61b-4188-478b-bc65-42b0df860163')
        GITHUB_REPONAME = 'synse-sdk'
      }
      steps {
        sh 'make ci-check-version'

        // Auto-generate a changelog for the release
        sh './bin/ci/generate_changelog.sh'

        sh 'mkdir build'
        sh 'cp ./CHANGELOG.md build/CHANGELOG.md'

        // Create the release
        sh 'docker pull edaniszewski/ghr'
        sh 'docker run --rm -v $PWD:/repo edaniszewski/ghr -u ${GITHUB_USER} -r ${GITHUB_REPONAME} -t ${GITHUB_TOKEN} -b "$(cat ./CHANGELOG.md)" -replace -draft ${TAG_NAME} build/'
      }
    }
  }
}
