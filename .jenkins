#!/usr/bin/env groovy

pipeline {

  agent any

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Test') {
      environment {
        CODECOV_TOKEN = credentials('codecov-token')
      }
      steps {
        script {
          docker.image('vaporio/jenkins-agent-golang:latest').inside('-e CODECOV_TOKEN=$CODECOV_TOKEN') {
            sh 'CGO_ENABLED=0 go test -coverprofile=coverage.txt -covermode=atomic ./sdk/...'
            sh 'curl -s https://codecov.io/bash | bash -s - -t ${CODECOV_TOKEN}'
          }
        }
      }
    }

    stage('Lint') {
      steps {
        script {
          docker.image('vaporio/jenkins-agent-golang:latest').inside() {
            sh 'golint -set_exit_status ./sdk/... ./examples/...'
          }
        }
      }
    }

    stage('Build') {
      steps {
        script {
          docker.image('vaporio/jenkins-agent-golang:latest').inside() {
            // Build the SDK project
            sh 'go build -v ./sdk'

            // Build the SDK example plugins
            sh 'for d in examples/*/; do cd $d; if [ "$d" != "examples/c_plugin/" ]; then go build -v -o plugin; fi ; cd ../.. ; done'

            // Check that the example plugins dry-run successfully
            sh 'for d in examples/*/; do if [ "$d" != "examples/c_plugin/" ]; then cd $d; if [ ! -f "plugin" ]; then echo "plugin binary not found"; fi; if ! ./plugin --dry-run; then exit 1; fi; cd ../.. ; fi ; done'
          }
        }
      }
    }

    stage('Tagged Release') {
      when {
        // example matches: 1.2.3, 1.2.3-dev
        tag pattern: '(0|[1-9]*)\\.(0|[1-9]*)\\.(0|[1-9]*)(-(\\S*))?$', comparator: "REGEXP"
      }
      environment {
        GITHUB_TOKEN = credentials('vio-bot-gh-token')
      }
      steps {
        script {
          docker.image('vaporio/jenkins-agent-golang:latest').inside('-v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -e GITHUB_TOKEN=$GITHUB_TOKEN --group-add docker') {
            withDockerRegistry(registry: [credentialsId: 'vio-docker-hub']) {
              sh 'goreleaser release --rm-dist'
            }
          }
        }
      }
    }
  }
}
