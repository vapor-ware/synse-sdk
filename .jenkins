#!/usr/bin/env groovy

pipeline {

  agent any

  environment {
    PROJ_PATH = '/go/src/github.com/vapor-ware/synse-sdk'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    // This stage is done first in order to get the vendored dependencies
    // if they do not already exist. This should improve the build time of
    // all subsequent stages which require the vendored dependencies to
    // exist (e.g. testing, building)
    stage('Vendor Dependencies') {
      agent {
        docker {
          image 'vaporio/golang:1.11'
        }
      }
      steps {
        // Set up the project in the docker container. The project must be
        // on the GOPATH (/go) in order to correctly vendor dependencies and
        // build the project artifacts.
        sh 'mkdir -p ${PROJ_PATH} && cp -r ${WORKSPACE}/* ${PROJ_PATH}'

        // The pipeline's 'dir()' directive is broken when run inside a docker
        // container, so we need to 'cd' into the project directory prior to
        // running the required commands.
        sh 'cd ${PROJ_PATH} && make dep'

        // Copy the vendor directory back down to the WORKSPACE, since it is
        // volume mounted. This way all subsequent stages will have the
        // project already vendored.
        sh 'mkdir -p ${WORKSPACE}/vendor'
        sh 'cp -r ${PROJ_PATH}/vendor/* ${WORKSPACE}/vendor'
      }
    }

    // Run linting on project source code.
    stage('Lint') {
      agent {
        docker {
          image 'vaporio/golang:1.11'
        }
      }
      steps {
        // Set up the project in the docker container. The project must be
        // on the GOPATH (/go) in order to correctly vendor dependencies and
        // build the project artifacts.
        sh 'mkdir -p ${PROJ_PATH} && cp -r ${WORKSPACE}/* ${PROJ_PATH}'

        // The pipeline's 'dir()' directive is broken when run inside a docker
        // container, so we need to 'cd' into the project directory prior to
        // running the required commands.
        sh 'cd ${PROJ_PATH} && make lint'
      }
    }

    // Run unit tests and upload the coverage report to codecov.
    stage('Test') {
      agent {
        docker {
          image 'vaporio/golang:1.11'
        }
      }
      environment {
        CODECOV_TOKEN = credentials('codecov-token')
      }
      steps {
        // Set up the project in the docker container. The project must be
        // on the GOPATH (/go) in order to correctly vendor dependencies and
        // build the project artifacts.
        sh 'mkdir -p ${PROJ_PATH} && cp -r ${WORKSPACE}/* ${PROJ_PATH}'

        // The pipeline's 'dir()' directive is broken when run inside a docker
        // container, so we need to 'cd' into the project directory prior to
        // running the required commands.
        sh 'cd ${PROJ_PATH} && make test'
        sh 'cd ${PROJ_PATH} && mv coverage.out coverage.txt && curl -s https://codecov.io/bash | bash -s - -t ${CODECOV_TOKEN}'
      }
    }

    // Verify that the binary builds successfully.
    stage('Build') {
      agent {
        docker {
          image 'vaporio/golang:1.11'
        }
      }
      steps {
        // Set up the project in the docker container. The project must be
        // on the GOPATH (/go) in order to correctly vendor dependencies and
        // build the project artifacts.
        sh 'mkdir -p ${PROJ_PATH} && cp -r ${WORKSPACE}/* ${PROJ_PATH}'

        // The pipeline's 'dir()' directive is broken when run inside a docker
        // container, so we need to 'cd' into the project directory prior to
        // running the required commands.
        sh 'cd ${PROJ_PATH} && make build'
        sh 'cd ${PROJ_PATH} && make examples'
        sh 'cd ${PROJ_PATH} && make check-examples'
      }
    }

    // Generate a new release draft on GitHub for a tag matching a version string
    // pattern. The release will include an auto-generated changelog and build
    // artifacts.
    stage('Draft GitHub Release') {
      when {
        // example matches: 1.2.3, 1.2.3-dev
        tag pattern: '(0|[1-9]*)\\.(0|[1-9]*)\\.(0|[1-9]*)(-(\\S*))?$', comparator: "REGEXP"
      }
      environment {
        GITHUB_USER = 'vapor-ware'
        GITHUB_TOKEN = credentials('1de2c61b-4188-478b-bc65-42b0df860163')
        GITHUB_REPONAME = 'synse-sdk'
      }
      steps {
        sh 'make ci-check-version'

        // Auto-generate a changelog for the release
        sh './bin/ci/generate_changelog.sh'

        sh 'mkdir build'
        sh 'cp ./CHANGELOG.md build/CHANGELOG.md'

        // Create the release
        sh 'docker pull edaniszewski/ghr'
        sh 'docker run --rm -v $PWD:/repo edaniszewski/ghr -u ${GITHUB_USER} -r ${GITHUB_REPONAME} -t ${GITHUB_TOKEN} -b "$(cat ./CHANGELOG.md)" -replace -draft ${TAG_NAME} build/'
      }
    }
  }
}
