# Defaults for our CircleCI jobs.
defaults: &defaults
  working_directory: /go/src/github.com/vapor-ware/synse-sdk
  docker:
    - image: circleci/golang:latest


# Common config for tag-triggered workflows
tag-filters: &tag-filters
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^[0-9]*(\.[0-9]*)*(-(\S)*)?$/


# CircleCI Config
version: 2
jobs:

  # test
  #
  # This job is run for all commits. It makes sure that: the source code
  # is properly linted, the source code is properly formatted, the source
  # can be compiled and built successfully, and that the tests pass.
  #
  # This job does not publish any build artifacts.
  test:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-vendor-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
            - v1-vendor-{{ checksum "Gopkg.toml" }}
      - run:
          name: Setup for Tests
          command: |
            sudo mkdir /synse
            sudo chown -R $(whoami) /synse
      - run:
          name: Install Vendored Dependencies
          command: make dep
      - run:
          name: Lint
          command: make lint
      - run:
          name: Format
          command: |
            fmt="$(find . -name '*.go' -not -wholename './vendor/*' | while read -r file; do goimports -d "$file"; done)"
            if [ "$fmt" != "" ]; then
              echo "$fmt"
              exit 1
            fi
      - run:
          name: Test
          command: |
            # run tests with coverage
            ./bin/coverage.sh

            # upload coverage results
            bash <(curl -s https://codecov.io/bash) -t d17f8865-2def-4cd8-87ad-d6ae861ee4b3
      - run:
          name: Build Examples
          command: make examples
      - save_cache:
          when: on_success
          key: v1-vendor-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
          paths:
            - vendor/

  # release
  #
  # This job creates a GitHub release draft for the tag that was pushed.
  # It generates a changelog for the release and attaches build artifacts
  # to the release as well. The release should be manually published on GitHub.
  release:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Check Version matches Tag
          command: make ci-check-version
      - run:
          name: Install Vendored Dependencies
          command: make dep
      - run:
          name: Generate Changelog
          command: |
            tag=$(git describe --abbrev=0 --tags `git rev-list --tags --skip=1 --max-count=1` || true)
            since_tag=$(if [ "${tag}" ]; then echo "--since-tag ${tag}"; fi)

            docker pull timfallmk/github-changelog-generator
            docker run --name changelog timfallmk/github-changelog-generator \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -p ${CIRCLE_PROJECT_REPONAME} \
              -t ${GITHUB_TOKEN} \
              ${since_tag}
            docker cp changelog:/usr/local/src/your-app/CHANGELOG.md ./
      - run:
          name: Create Release
          command: |
            mkdir build
            go get -v github.com/tcnksm/ghr
            if git describe --exact-match --tags HEAD; then
              CIRCLE_TAG=$(git describe --exact-match --tags HEAD)
            fi
            ghr \
              -u ${GITHUB_USER} \
              -t ${GITHUB_TOKEN} \
              -b "$(cat ./CHANGELOG.md)" \
              -replace \
              -draft \
              ${CIRCLE_TAG} build/


workflows:
  version: 2
  build:
    jobs:
      - test
      - release:
          context: vapor-auto
          <<: *tag-filters
